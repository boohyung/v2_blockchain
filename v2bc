#!/usr/bin/python
import argparse
import sys
import os
import subprocess
from blockchain_config import BlockchainConfig, Node
from ui_server import UIServer

desc = """V2 ethereum Blockchain - A set of tools to install, create ethereum
nodes and connect to the V2 experimental ethereum blockchain."""

commands = ['create', 'console', 'attach', 'start', 'run', 'mine', 'configstring', 'list', 'editor']

parser = argparse.ArgumentParser(description=desc)
parser.add_argument(
    'command',
    help='command to run (options: %s)' % ", ".join(commands),
    metavar='Command',
    choices=commands)

parser.add_argument(
    '--geth-commands',
    help='Run geth commands on node defined by --id option (multiple)',
    nargs="+")

parser.add_argument(
    '--id', '-i',
    default='v2_blockchain',
    help='identity of the node or cluster.')

parser.add_argument(
    '--base-dir',
    default='~/.blockchain',
    help='If you want to work on a different base directory. By default it is ~/.blockchain')

parser.add_argument(
    '--load', '-l',
    metavar='FILENAME',
    help='Use with console to load a contract file for an existing contract on the network. these contract files are the result of deploying a contract through the editor.')

parser.add_argument(
    '--no-account',
    action='store_true',
    help='Do not automatically create an account on the new Node')

parsed = parser.parse_args()
args = vars(parsed)
blockchainPath = args["base_dir"]

config = BlockchainConfig(blockchainPath)
node = config.getNodeById(args["id"])

if args["command"] == "create":
    if node is None:
        if args["no-account"]:
            config.createNode(args["id"], create_account=False)
        else:
            config.createNode(args["id"])
    else:
        print("Error: Node already exists.")

elif args["command"] == "console":
    subprocess.call("geth " + config.getConfigString(node) + " --unlock 0 console", shell=True)

elif args["command"] == "attach":
    print("geth attach "+config.path+"/"+node.data_dir+"/geth.ipc")
    subprocess.call("geth attach "+config.path+"/"+node.data_dir+"/geth.ipc",shell=True)

elif args["command"] == "start":
    call = "geth " + config.getConfigString(node)
    subprocess.call(call,shell=True)

elif args["command"] == "mine":
    call = "geth " + config.getConfigString(node) + ' --mine --minerthreads "1"'
    subprocess.call(call,shell=True)

elif args["command"] == "run":
    if node is None:
        print("Error: Node not found.")
    else:
        subprocess.call("geth " + config.getConfigString(node) + " " + " ".join(args["geth_commands"]), shell=True)

elif args["command"] == "configstring":
    if node is None:
        print("Error: Node not found.")
    else:
        print(config.getConfigString(node))

elif args["command"] == "list":
    for n in config.nodes:
        print(n.identity)

elif args["command"] == "editor":
    import webbrowser
    s = UIServer()
    s.start()
    webbrowser.open("http://localhost:8888/contracts.html",new=2)
    try:
        input("Press enter to stop the editor")
    except:
        s.kill()
